using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using ModestTree;
using Varguiniano.YAPU.Runtime.Configuration;
using Varguiniano.YAPU.Runtime.Monster;
using Varguiniano.YAPU.Runtime.MonsterDatabase;
using Varguiniano.YAPU.Runtime.MonsterDatabase.Moves;

namespace Varguiniano.YAPU.Runtime.Battle.AI
{
    /// <summary>
    /// Base class for a battle ai.
    /// </summary>
    public abstract class BattleAI : MonsterDatabaseScriptable<BattleAI>
    {
        /// <summary>
        /// Request to choose to perform an action.
        /// </summary>
        /// <param name="settings">Reference to the yapu settings.</param>
        /// <param name="battleManager">Reference to the battle manager.</param>
        /// <param name="type">Type of this AI's battler.</param>
        /// <param name="inBattleIndex">Reference to the AI's in battle index.</param>
        /// <param name="callback">Callback stating the action to take along with its parameters.</param>
        public abstract IEnumerator RequestPerformAction(YAPUSettings settings,
                                                         BattleManager battleManager,
                                                         BattlerType type,
                                                         int inBattleIndex,
                                                         Action<BattleAction> callback);

        /// <summary>
        /// Request the AI to send a new monster.
        /// </summary>
        /// <param name="settings">Reference to the yapu settings.</param>
        /// <param name="battleManager">Reference to the battle manager.</param>
        /// <param name="type">Type of this AI's battler.</param>
        /// <param name="inBattleIndex">Reference to the AI's in battle index of the monster that has been forced out.</param>
        /// <param name="forbiddenBattlers">Battlers that can't be sent in.</param>
        /// <returns>The index of the monster to send from the AI's roster.</returns>
        public abstract int RequestNewMonster(YAPUSettings settings,
                                              BattleManager battleManager,
                                              BattlerType type,
                                              int inBattleIndex,
                                              List<Battler> forbiddenBattlers);

        /// <summary>
        /// Once a move has been selected, generate the action for it.
        /// </summary>
        /// <param name="battleManager">Reference to the battle manager.</param>
        /// <param name="type">Type of this AI's battler.</param>
        /// <param name="inBattleIndex">Reference to the AI's in battle index.</param>
        /// <param name="move">Selected move.</param>
        /// <param name="battler">The user.</param>
        /// <param name="targetOverride">Use if the target is already chosen. Will only be used if the target can't be autogenerated.</param>
        /// <returns>The battle action for that move.</returns>
        protected static BattleAction GenerateActionForMove(BattleManager battleManager,
                                                            BattlerType type,
                                                            int inBattleIndex,
                                                            MonsterInstance battler,
                                                            Move move,
                                                            Battler targetOverride = null)
        {
            BattleAction action = new()
                                  {
                                      BattlerType = type,
                                      Index = inBattleIndex,
                                      ActionType = BattleAction.Type.Move
                                  };

            List<int> parameters = new()
                                   {
                                       move == battleManager.YAPUSettings.NoPPMove
                                           ? 4
                                           : battler.CurrentMoves.IndexOf(battler.CurrentMoves.First(slot => slot.Move
                                                                           == move))
                                   };

            if (BattleUtils.TryAutoGenerateMoveTargets(battleManager,
                                                       move,
                                                       type,
                                                       inBattleIndex,
                                                       out List<int> autoParameters))
                parameters.AddRange(autoParameters);
            else
            {
                List<Battler> validTargets =
                    MoveUtils.GenerateValidTargetsForMove(battleManager, type, inBattleIndex, move, StaticLogger);

                if (validTargets == null)
                {
                    parameters.Add(0);
                    parameters.Add(-1);
                }
                else
                {
                    (BattlerType targetType, int target) =
                        battleManager.Battlers.GetTypeAndIndexOfBattler(validTargets.Contains(targetOverride)
                                                                            ? targetOverride
                                                                            : battleManager.RandomProvider
                                                                               .RandomElement(validTargets));

                    parameters.Add((int) targetType);
                    parameters.Add(target);
                }
            }

            action.Parameters = parameters.ToArray();

            return action;
        }

        /// <summary>
        /// Called when a battler faints.
        /// </summary>
        public virtual void OnBattlerFainted(BattleManager battleManager,
                                             BattlerType ownType,
                                             int ownIndex,
                                             BattlerType faintedType,
                                             int faintedIndex)
        {
        }

        /// <summary>
        /// Called when the battle ends.
        /// </summary>
        public virtual void OnBattleEnded(BattlerType ownType,
                                          int ownIndex,
                                          BattlerType winners,
                                          BattleManager battleManager)
        {
        }

        /// <summary>
        /// Return the fighting enemies of the given type.
        /// </summary>
        /// <param name="battleManager">Reference to the battle manager.</param>
        /// <param name="type">Type we are.</param>
        /// <returns>Our fighting enemies.</returns>
        public static List<Battler> GetEnemies(BattleManager battleManager, BattlerType type) =>
            battleManager.Battlers.GetBattlersFighting(type == BattlerType.Ally
                                                           ? BattlerType.Enemy
                                                           : BattlerType.Ally);
    }
}